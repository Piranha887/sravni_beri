# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –∫–ª–∞—Å—Å–æ–≤
import os  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import re  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è re (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
import asyncpg  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è asyncpg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from aiogram import types  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ types –∏–∑ –º–æ–¥—É–ª—è aiogram
from aiogram.dispatcher.filters import BoundFilter  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ BoundFilter –∏–∑ –º–æ–¥—É–ª—è aiogram.dispatcher.filters


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ManufactoryCheck, –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ—Å—è –æ—Ç –∫–ª–∞—Å—Å–∞ BoundFilter
class ManufactoryCheck(BoundFilter):
    # –ú–µ—Ç–æ–¥ check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    async def check(self, message: types.Message):
        try:
            pattern = re.compile(r"^(?!(üîô\s–§–∏–ª—å—Ç—Ä—ã|üîô\s–ù–∞–∑–∞–¥)$).*")  # –ó–∞–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

            if message.text == pattern.match(message.text).group(0):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∞–±–ª–æ–Ω—É
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                connection = await asyncpg.connect(
                    database=os.getenv("DATABASE"),  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE
                    user=os.getenv("PGUSER"),  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PGUSER
                    password=os.getenv("PGPASSWORD"),  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PGPASSWORD
                    host='localhost'  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                query = "SELECT manufacture_buttons FROM buttons WHERE manufacture_buttons = $1"
                result = await connection.fetchval(query, message.text)
                await connection.close()

                if result:  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    return True
                else:
                    await message.answer(
                        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é")  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    return False
            else:
                await message.answer(
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é")  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É
                return False
        except:
            await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é")  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
            return False
